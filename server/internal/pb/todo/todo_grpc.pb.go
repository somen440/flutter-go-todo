// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoReply, error)
	GetTodoList(ctx context.Context, in *GetTodoListRequest, opts ...grpc.CallOption) (*GetTodoListReply, error)
	UpdateTodoTitle(ctx context.Context, in *UpdateTodoTitleRequest, opts ...grpc.CallOption) (*UpdateTodoTitleReply, error)
	DoneTodo(ctx context.Context, in *DoneTodoRequest, opts ...grpc.CallOption) (*DoneTodoReply, error)
	UnDoneTodo(ctx context.Context, in *UnDoneTodoRequest, opts ...grpc.CallOption) (*UnDoneTodoReply, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoReply, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

var todoServiceCreateTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateTodo",
}

func (c *todoServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoReply, error) {
	out := new(CreateTodoReply)
	err := c.cc.Invoke(ctx, "/todo.TodoService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceGetTodoListStreamDesc = &grpc.StreamDesc{
	StreamName: "GetTodoList",
}

func (c *todoServiceClient) GetTodoList(ctx context.Context, in *GetTodoListRequest, opts ...grpc.CallOption) (*GetTodoListReply, error) {
	out := new(GetTodoListReply)
	err := c.cc.Invoke(ctx, "/todo.TodoService/GetTodoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceUpdateTodoTitleStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateTodoTitle",
}

func (c *todoServiceClient) UpdateTodoTitle(ctx context.Context, in *UpdateTodoTitleRequest, opts ...grpc.CallOption) (*UpdateTodoTitleReply, error) {
	out := new(UpdateTodoTitleReply)
	err := c.cc.Invoke(ctx, "/todo.TodoService/UpdateTodoTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceDoneTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "DoneTodo",
}

func (c *todoServiceClient) DoneTodo(ctx context.Context, in *DoneTodoRequest, opts ...grpc.CallOption) (*DoneTodoReply, error) {
	out := new(DoneTodoReply)
	err := c.cc.Invoke(ctx, "/todo.TodoService/DoneTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceUnDoneTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "UnDoneTodo",
}

func (c *todoServiceClient) UnDoneTodo(ctx context.Context, in *UnDoneTodoRequest, opts ...grpc.CallOption) (*UnDoneTodoReply, error) {
	out := new(UnDoneTodoReply)
	err := c.cc.Invoke(ctx, "/todo.TodoService/UnDoneTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var todoServiceDeleteTodoStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteTodo",
}

func (c *todoServiceClient) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoReply, error) {
	out := new(DeleteTodoReply)
	err := c.cc.Invoke(ctx, "/todo.TodoService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceService is the service API for TodoService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTodoServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TodoServiceService struct {
	CreateTodo      func(context.Context, *CreateTodoRequest) (*CreateTodoReply, error)
	GetTodoList     func(context.Context, *GetTodoListRequest) (*GetTodoListReply, error)
	UpdateTodoTitle func(context.Context, *UpdateTodoTitleRequest) (*UpdateTodoTitleReply, error)
	DoneTodo        func(context.Context, *DoneTodoRequest) (*DoneTodoReply, error)
	UnDoneTodo      func(context.Context, *UnDoneTodoRequest) (*UnDoneTodoReply, error)
	DeleteTodo      func(context.Context, *DeleteTodoRequest) (*DeleteTodoReply, error)
}

func (s *TodoServiceService) createTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/todo.TodoService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) getTodoList(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/todo.TodoService/GetTodoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetTodoList(ctx, req.(*GetTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) updateTodoTitle(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateTodoTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/todo.TodoService/UpdateTodoTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTodoTitle(ctx, req.(*UpdateTodoTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) doneTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DoneTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/todo.TodoService/DoneTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DoneTodo(ctx, req.(*DoneTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) unDoneTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnDoneTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UnDoneTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/todo.TodoService/UnDoneTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UnDoneTodo(ctx, req.(*UnDoneTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TodoServiceService) deleteTodo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/todo.TodoService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteTodo(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterTodoServiceService registers a service implementation with a gRPC server.
func RegisterTodoServiceService(s grpc.ServiceRegistrar, srv *TodoServiceService) {
	srvCopy := *srv
	if srvCopy.CreateTodo == nil {
		srvCopy.CreateTodo = func(context.Context, *CreateTodoRequest) (*CreateTodoReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
		}
	}
	if srvCopy.GetTodoList == nil {
		srvCopy.GetTodoList = func(context.Context, *GetTodoListRequest) (*GetTodoListReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetTodoList not implemented")
		}
	}
	if srvCopy.UpdateTodoTitle == nil {
		srvCopy.UpdateTodoTitle = func(context.Context, *UpdateTodoTitleRequest) (*UpdateTodoTitleReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoTitle not implemented")
		}
	}
	if srvCopy.DoneTodo == nil {
		srvCopy.DoneTodo = func(context.Context, *DoneTodoRequest) (*DoneTodoReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DoneTodo not implemented")
		}
	}
	if srvCopy.UnDoneTodo == nil {
		srvCopy.UnDoneTodo = func(context.Context, *UnDoneTodoRequest) (*UnDoneTodoReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UnDoneTodo not implemented")
		}
	}
	if srvCopy.DeleteTodo == nil {
		srvCopy.DeleteTodo = func(context.Context, *DeleteTodoRequest) (*DeleteTodoReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "todo.TodoService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateTodo",
				Handler:    srvCopy.createTodo,
			},
			{
				MethodName: "GetTodoList",
				Handler:    srvCopy.getTodoList,
			},
			{
				MethodName: "UpdateTodoTitle",
				Handler:    srvCopy.updateTodoTitle,
			},
			{
				MethodName: "DoneTodo",
				Handler:    srvCopy.doneTodo,
			},
			{
				MethodName: "UnDoneTodo",
				Handler:    srvCopy.unDoneTodo,
			},
			{
				MethodName: "DeleteTodo",
				Handler:    srvCopy.deleteTodo,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "todo/todo.proto",
	}

	s.RegisterService(&sd, nil)
}
